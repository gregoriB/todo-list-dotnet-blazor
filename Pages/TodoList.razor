@page "/todolist"

<PageTitle>TODO LIST</PageTitle>

<h1 class="text-center">Todo List</h1>

<h2 class="mt-5">Todos count: @todos.Count()</h2>
<h3 class="mb-5">Completed: @todos.Count(todo => todo.IsDone)</h3>

<div class="w-75">
    <form class="mb-3 input-group" @onsubmit="AddTodo" @onsubmit:preventDefault>
        <input class="form-control m-0" type="text" placeholder="Enter a todo" @bind="inputValue" />
        <button class="input-group-append btn btn-primary">Add Todo</button>
    </form>


    <ul class="p-0 m-0">
        @foreach (var todo in todos)
        {
            <li class="ps-2 my-2">
                <form
                    class="d-flex justify-content-between todo-item input-group"
                    @onsubmit="() => ToggleEditing(todo)"
                    @onsubmit:preventDefault>
                    <input
                        class="
                            form-control ps-0
                            @(todo.IsEditing ? "" : "d-none")
                        "
                        type="text"
                        value="@todo.Title"
                        @onchange="(e) => UpdateTodo(e, todo)"
                    />
                    <span
                        class="
                            my-auto mx-0 pointer
                            @(todo.IsDone ? "completed" : "")
                            @(todo.IsEditing ? "d-none" : "")
                        "
                        @onclick="() => ToggleDone(todo)"
                    >
                        @todo.Title
                    </span>
                    <span>
                        <button
                            class="btn btn-secondary"
                            type="submit"
                            disabled="@(todo.IsDone)"
                        >
                            @(todo.IsEditing ? "save" : "edit")
                        </button>

                        <button
                            class="btn btn-danger delete-btn"
                            disabled="@(todo.IsEditing)"
                            @onclick="() => RemoveTodo(todo)"
                        >
                            X
                        </button>
                    </span>
                </form>
            </li>
        }
    </ul>
</div>


@code {
    private List<TodoItem> todos = new();
    private string? inputValue = string.Empty;

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(inputValue))
        {
            DateTime date = DateTime.Now;
            long id = date.ToBinary();
            todos.Add(new TodoItem {
                Title = inputValue,
                Id = id,
                IsEditing = false,
                IsDone = false,
            });
            inputValue = string.Empty;
        }
    }

    private void ToggleDone(TodoItem item)
    {
        item.IsDone = !item.IsDone;
    }

    private void ToggleEditing(TodoItem item)
    {
        item.IsEditing = !item.IsEditing;
    }

    private void UpdateTodo(ChangeEventArgs e, TodoItem item)
    {
        item.Title = e.Value.ToString();
    }

    private void RemoveTodo(TodoItem item)
    {
        todos = todos.Where(todo => todo.Id != item.Id).ToList();
    }

    private class TodoItem
    {
        public string Title { get; set; }
        public long Id { get; set; }
        public bool IsDone { get; set; }
        public bool IsEditing { get; set; }
    }
}

<style>
    .pointer {
      cursor: pointer;
    }

    ul {
        list-style: none;
    }

    .completed {
        text-decoration: line-through;
        opacity: .7;
    }

   .delete-btn:disabled {
       opacity: .5;
   }
</style>
